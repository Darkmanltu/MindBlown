@page "/addMnemonic"

@using System.Text.Json
@using static MnemonicsType
@using static StringExtensions
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation
@inject IJSRuntime JS

<link rel="stylesheet" href="css/Mnemonics.css" />
<PageTitle>Add Mnemonics</PageTitle>

<form @onsubmit="OnSubmit">
<h1 id="main_name">@StringExtensions.CapitalizeWords("mnemonics form")</h1>
    <label for="HelperText">Helper text:</label>
    <input type="text" @onkeydown="@Enter" id="HelperText" name="HelperText" @bind="Model.HelperText" required />
    <br />
    <label for="MnemonicText">Text to memorize:</label>
    <input type="text" id="MnemonoicText" name="MnemonicText" @bind="Model.MnemonicText" required />
    <br />
    
    <label for="category">Category:</label>
    <select id="category" @bind="Model.Category">
        @foreach (var category in Enum.GetValues(typeof(MnemonicCategory)).Cast<MnemonicCategory>())
        {
            <option value="@category">@category</option>
        }
    </select>
    @if(mnemonicAlreadyExists)
    {
        <br />
        <div class="invalid-input-message">@invalidInputMessage</div>
    }
    <br />
    <button type="submit">Submit</button>
    <button @onclick="RedirectToUpload" style="">Upload from JSON</button>
</form>


<h2>@StringExtensions.CapitalizeWords("saved mnemonics")</h2>
@if (showMnemonics)
{
    <table>
        @if (mnemonicsList != null && mnemonicsList.Count > 0)
        {
            <tr>
                <th>Helper text</th>
                <th>Mnemonic</th>
                <th>Category</th>
                <th>Action</th>
            </tr>
            @foreach (var mnemonic in mnemonicsList)
            {
                <tr>
                    <td>@mnemonic.HelperText</td>
                    <td>@mnemonic.MnemonicText</td>
                    <td>@mnemonic.Category</td>
                    <td><button class="delete-button" @onclick="() => RemoveMnemonic(mnemonic.Id)">X</button></td>
                </tr>
            }
        }
        else
        {
            <p class="no-mnemonics">No mnemonics available.</p>
        }
    </table>
}

<button @onclick="LoadMnemonics">@StringExtensions.CapitalizeWords("load mnemonics")</button>
<button @onclick="DownloadJson">@StringExtensions.CapitalizeWords("download as") JSON</button>

@code {
    private MnemonicsType Model { get; set; } = new MnemonicsType();
    private List<MnemonicsType> mnemonicsList = new List<MnemonicsType>();
   //gali neprireikt private List<MnemonicsType> loadedMnemonicsList = new List<MnemonicsType>();
    private bool showMnemonics = false;
    private bool mnemonicAlreadyExists; 
    private string invalidInputMessage = "Mnemonic with given Helper text already exists.";

    private async Task OnSubmit()
    {
        // Getting mnemonics from local storage
        var existingMnemonics = await localStorage.GetItemAsync<List<MnemonicsType>>("userMnemonics") ?? new List<MnemonicsType>();
        
        mnemonicAlreadyExists = existingMnemonics.Where(m => m.HelperText == Model.HelperText).Count() > 0;

        if(mnemonicAlreadyExists)
        {
            await localStorage.SetItemAsync("userMnemonics", existingMnemonics);
            Model = new MnemonicsType();
            return;
        }

        var newMnemonic = new MnemonicsType
        {
            Id = Guid.NewGuid(),
            HelperText = Model.HelperText,
            MnemonicText = Model.MnemonicText,
            Category = Model.Category
        };

        existingMnemonics.Add(newMnemonic);

        // save the values to local storage
        await localStorage.SetItemAsync("userMnemonics", existingMnemonics);

        // clear for new input
        Model = new MnemonicsType();
    }

    private async Task LoadMnemonics()
    {
        // read the value as list
        mnemonicsList = await localStorage.GetItemAsync<List<MnemonicsType>>("userMnemonics") ?? new List<MnemonicsType>();

        // Show the mnemonics after loading
        showMnemonics = true;
    }

    private async Task RemoveMnemonic(Guid mnemonicId)
    {
        var existingMnemonics = await localStorage.GetItemAsync<List<MnemonicsType>>("userMnemonics") ?? new
        List<MnemonicsType>();

        var mnemonicToRemove = existingMnemonics.FirstOrDefault(m => m.Id == mnemonicId);
        if (mnemonicToRemove != null)
        {
            existingMnemonics.Remove(mnemonicToRemove);
            await localStorage.SetItemAsync("userMnemonics", existingMnemonics);

            // Refresh the mnemonics list after removal
            mnemonicsList = existingMnemonics;
        }
    }
    // On Users button press Enter, submit the form couse its cringe to click with mouse
    public async Task Enter(KeyboardEventArgs e){
        if(e.Key == "Enter" || e.Key == "NumpadEnter"){
            await OnSubmit();
        }
    }

    private void RedirectToUpload()
    {
        Navigation.NavigateTo("/json-upload");
    }

    private async Task DownloadJson()
    {
        
        var existingMnemonics = await localStorage.GetItemAsync<List<MnemonicsType>>("userMnemonics") ?? new List<MnemonicsType>();
        
        object boxedMnemonics = (object)existingMnemonics;

        var fileName = "mnemonics.json";
        var jsonFormattedData = JsonSerializer.Serialize(boxedMnemonics, options: new JsonSerializerOptions{WriteIndented = true});

        await JS.InvokeVoidAsync("downloadFile", fileName, jsonFormattedData);
    }    
}
