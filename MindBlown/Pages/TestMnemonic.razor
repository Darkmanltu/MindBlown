@page "/testMnemonic"


@using static AnsweringStatsStruct
@using static LastWrongAnswerRecord
@using static MindBlown.Pages.Mnemonics
@using static StringExtensions
@using System.Text.Json
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<link rel="stylesheet" href="css/TestMnemonic.css" />

<div class="mnemonics-container">
    <h1>@StringExtensions.CapitalizeWords("test your mnemonics")</h1>
    <h4>A place to test your created mnemonics</h4>

    @if (mnemonicsList.Count() != 0)
    {
        @if (testingMnemonic != null)
        {
            <div class="mnemonic-status">
                <div class="mnemonic-display">Mnemonic: <span>@testingMnemonic.HelperText</span></div>
                <div class="mnemonic-display">Category: <span>@testingMnemonic.Category</span></div>
            </div>

            <div class="input-container">
                 <form @onsubmit="checkMnemonic">
                    <input type="text" id="userGivenMnemonicText" name="userGivenMnemonicText" 
               placeholder="Enter mnemonic..." 
               @bind="userGivenMnemonicText" required class="input-text" />
                <br />
                    <button type="submit">Check</button>
                </form>
            </div>
        }
        else
        {
            <div class="mnemonic-status">
                <div class="loading-message">Mnemonic is loading...</div>
            </div>
        }
    }
    else
    {
        <div class="mnemonic-status">
            No mnemonics to test
        </div>
    }
    <br />

    @if (answeringStats.allAnswerCount != 0)
    {
        <div class="stats-results">
            Your result: <strong>@(Math.Round(((double)answeringStats.correctAnswerCount / answeringStats.allAnswerCount) *
            100, answeringStats.precision)) %</strong>
        </div>
    }

    @if (lastWrongAnswer != null)
    {
        <br />
        <div class="wrong-answer-container">
            <h4>@StringExtensions.CapitalizeWords("last wrong answer")</h4>
            <div><strong>@StringExtensions.CapitalizeWords("mnemonic"):</strong> @lastWrongAnswer.helperText</div>
            <div><strong>@StringExtensions.CapitalizeWords("full mnemonic"):</strong> @lastWrongAnswer.mnemonicText</div>
            <div><strong>@StringExtensions.CapitalizeWords("wrongly answered"):</strong> @lastWrongAnswer.wrongTextMnemonic</div>
        </div>
    }
</div>

@code {
    // TODO: Implement the test of Mnemonics:
    /*

    */
    private List<MnemonicsType> mnemonicsList = new List<MnemonicsType>();
    private string userGivenMnemonicText = "";

    // Initializes to 0 both values
    public AnsweringStatsStruct answeringStats = new AnsweringStatsStruct();

    private MnemonicsType? testingMnemonic;

    //LastWrongAnswerRecord is defined below
    public LastWrongAnswerRecord? lastWrongAnswer;

    private bool nextMnemonic = false;


    //Checks whether testingMnemonic is no longer null every 1s
    protected override async Task OnInitializedAsync()
    {
        while (testingMnemonic == null)
        {
            await Task.Delay(50);
        }

        //testingMnemonic is no longer null
    }

    /*
    Loads mnemonicsList and gets random mnemonic from mnemonicsList after going into this website.
    Also updates what mnemonic is being tested now and shows it on website.
    */
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadMnemonics();
            if (mnemonicsList.Count() != 0)
            {
                System.Console.WriteLine("new random mnemonic: " + getRandomMnemonic().HelperText);
            }
        }

        if (nextMnemonic)
        {
            nextMnemonic = false;
            System.Console.WriteLine("new random mnemonic: " + getRandomMnemonic().HelperText + " " + nextMnemonic);
            StateHasChanged();
        }
    }


    //Loading from local storage
    private async Task loadMnemonics()
    {
        //Load the mnemonics from local storage
        mnemonicsList = await localStorage.GetItemAsync<List<MnemonicsType>>("userMnemonics") ?? new List<MnemonicsType>();
    }

    //Task when Check button is pressed
    private async Task checkMnemonic()
    {
        
        object userMnemonic = new MnemonicsType(userGivenMnemonicText);

        @* userMnemonic.TextW = userGivenTextW; *@
        @* if(testingMnemonic?.TextW == userGivenTextW && testingMnemonic != null) *@
        if (testingMnemonic != null && testingMnemonic.Equals((MnemonicsType)userMnemonic))
        {
            answeringStats.correctAnswerCount++;
        }
        else
        {
            //Use record for last wrong answered mnemonic
            if (testingMnemonic?.HelperText != null && testingMnemonic?.MnemonicText != null)
            {
                lastWrongAnswer = new LastWrongAnswerRecord
                    {
                        Id = testingMnemonic.Id,
                        helperText = testingMnemonic?.HelperText,
                        mnemonicText =
                    testingMnemonic?.MnemonicText,
                        wrongTextMnemonic = userGivenMnemonicText
                    };
            }
        }
        nextMnemonic = true;

        answeringStats.allAnswerCount++;
        userGivenMnemonicText = string.Empty;
       // userGivenTextW = "debug_123";
        StateHasChanged();
        await Task.Delay(1); // Fixes the warning (asyn methods must have await inside them)
    }


    private MnemonicsType getRandomMnemonic()
    {
        System.Random random = new System.Random();
        int randomNumber = random.Next(0, mnemonicsList.Count());
        MnemonicsType randomMnemonic = mnemonicsList[randomNumber];
        return testingMnemonic = randomMnemonic;
    }
    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
        {
            await checkMnemonic();
        }
    }
}

@* Pagal kategorijas leist pasirinkt grupes *@
@* Isskaidyt i smulkesnius failus *@
@* Pakeisti boxing/unboxing *@
@* Prideti Mnemonicos pavadinima *@
@* Aiskesnius kode pavadinimus kintamuju (textM) *@
@* File streama *@