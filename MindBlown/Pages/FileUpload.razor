@page "/json-upload"
@using Microsoft.AspNetCore.Components.Forms
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.Text.Json
@using static MnemonicsType
@using static MnemonicTypeNoGuid
@inject NavigationManager Navigation

<link rel="stylesheet" href="css/FileUpload.css" />


<div class="upload-container">
    <h1>Upload JSON File</h1>

    <label for="file-upload" class="custom-file-label">Choose File</label>
    <InputFile id="file-upload" OnChange="HandleFileSelected" accept=".json" />

    @if (fileInfo != null)
    {
        <p>File name: @fileInfo.Name</p>
        <p>File size: @fileInfo.Size bytes</p>
    }

    <div class="SuccesMessage">@message</div>

    <button @onclick="UploadFile">Upload</button>
    <button @onclick="ReturnToSetup">Go back</button>

</div>
@code {
    private IBrowserFile? fileInfo;

    private string? message;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        fileInfo = e.GetMultipleFiles(1).FirstOrDefault(); // Get the first selected file
        message = string.Empty;
    }

    private void ReturnToSetup()
    {
        Navigation.NavigateTo("/addMnemonic");
    }

    private async Task UploadFile()
    {
        if (fileInfo != null)
        {
            using var stream = fileInfo.OpenReadStream(maxAllowedSize: 10_000_000);
            using var reader = new StreamReader(stream);
            var jsonString = await reader.ReadToEndAsync();

            //List<MnemonicTypeNoGuid>? listFromJson = JsonSerializer.Deserialize<List<MnemonicTypeNoGuid>>(jsonString); *@ 
            
            List<object>? boxedMnemonicsList = JsonSerializer.Deserialize<List<object>>(jsonString);

        if (boxedMnemonicsList != null)
        {
            foreach (var boxedMnemonic in boxedMnemonicsList)
            {
                var boxedString = boxedMnemonic?.ToString();
                if (!string.IsNullOrEmpty(boxedString))
                {
                    // Unbox the object back to MnemonicsType by casting
                    var mnemonic = JsonSerializer.Deserialize<MnemonicsType>(boxedString);

                    if (mnemonic != null && mnemonic.HelperText != null)
                    {
                        var existingMnemonics = await localStorage.GetItemAsync<List<MnemonicsType>>("userMnemonics") ?? new List<MnemonicsType>();

                        var mnemonicAlreadyExists = existingMnemonics.Any(m => m.HelperText == mnemonic.HelperText);

                        if (!mnemonicAlreadyExists)
                        {
                            existingMnemonics.Add(mnemonic);
                        }

                        await localStorage.SetItemAsync("userMnemonics", existingMnemonics);
                    }
                }
            }

                message = "File uploaded and mnemonics unboxed successfully!";
                ResetFileInput();
            }
        }
    }

    private void ResetFileInput()
    {
        fileInfo = null;
    }
}
