@page "/addMnemonic"

@using System.Text.Json
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<link rel="stylesheet" href="css/MnemonicsAddForm.css" />
<PageTitle>Add Mnemonics</PageTitle>

<h1 id="main_name">Mnemonics Form</h1>
<form @onsubmit="OnSubmit">
    <label for="textM">TextM:</label>
    <input type="text" id="textM" name="textM" @bind="Model.TextM" required />
    <br />
    <label for="textW">TextW:</label>
    <input type="text" id="textW" name="textW" @bind="Model.TextW" required />
    <br />
    <button type="submit">Submit</button>
</form>

<h2 id="'main_name">Saved Mnemonics</h2>
@if (showMnemonics)
{
    <table>
        @if (mnemonicsList != null && mnemonicsList.Count > 0)
        {
            <tr>
                <th>Mnemonics text</th>
                <th>Whole text</th>
            </tr>
            foreach (var mnemonic in mnemonicsList)
            {
                <tr>
                    <td>@mnemonic.TextM</td>
                    <td>@mnemonic.TextW</td>
                </tr>
                @* <li>@mnemonic.TextM - @mnemonic.TextW</li> *@
            }
        }
        else
        {
            <p>No mnemonics available.</p>
        }
    </table>
}

<button @onclick="LoadMnemonics">Load Mnemonics</button>

@code {
    private MnemonicsType Model { get; set; } = new MnemonicsType();
    private List<MnemonicsType> mnemonicsList = new List<MnemonicsType>();
   //gali neprireikt private List<MnemonicsType> loadedMnemonicsList = new List<MnemonicsType>();
    private bool showMnemonics = false; 

    private async Task OnSubmit()
    {
        // Getting mnemonics from local storage
        var existingMnemonics = await localStorage.GetItemAsync<List<MnemonicsType>>("userMnemonics") ?? new List<MnemonicsType>();
        
        var newMnemonic = new MnemonicsType
        {
            Id = Guid.NewGuid(),
            TextM = Model.TextM,
            TextW = Model.TextW
        };

        existingMnemonics.Add(newMnemonic);

        // save the values to local storage
        await localStorage.SetItemAsync("userMnemonics", existingMnemonics);

        // clear for new input
        Model = new MnemonicsType();
    }

    private async Task LoadMnemonics()
    {
        // read the value as list
        mnemonicsList = await localStorage.GetItemAsync<List<MnemonicsType>>("userMnemonics") ?? new List<MnemonicsType>();

        // Show the mnemonics after loading
        showMnemonics = true;
    }

    public class MnemonicsType
    {
        public Guid Id { get; init; }
        public string? TextM { get; set; }
        public string? TextW { get; set; }
    }
}
